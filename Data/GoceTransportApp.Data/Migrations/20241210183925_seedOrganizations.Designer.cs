// <auto-generated />
using System;
using GoceTransportApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GoceTransportApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241210183925_seedOrganizations")]
    partial class seedOrganizations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GoceTransportApp.Data.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fddd8eae-3ce9-450c-ba91-c34aaac73c82",
                            AccessFailedCount = 0,
                            City = "Gotse Delchev",
                            ConcurrencyStamp = "44485c71-de49-4112-ab37-d3b56f9d93df",
                            CreatedOn = new DateTime(2024, 12, 10, 20, 39, 24, 270, DateTimeKind.Local).AddTicks(966),
                            Email = "user1@example.com",
                            EmailConfirmed = false,
                            FirstName = "Alice",
                            IsDeleted = false,
                            LastName = "Smith",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "../../images/no-profile-image",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "42aa7029-877a-4ebf-9270-5109ac52405a",
                            AccessFailedCount = 0,
                            City = "Mosomishte",
                            ConcurrencyStamp = "9ed57408-ea48-4d6a-a4d5-1049a118911c",
                            CreatedOn = new DateTime(2024, 12, 10, 20, 39, 24, 270, DateTimeKind.Local).AddTicks(1052),
                            Email = "user2@example.com",
                            EmailConfirmed = false,
                            FirstName = "Bob",
                            IsDeleted = false,
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "../../images/no-profile-image",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "88094558-c0f4-47a2-9f53-6797425d706d",
                            AccessFailedCount = 0,
                            City = "Borovo",
                            ConcurrencyStamp = "ab3e1e6f-b27e-4b6f-87da-0be58c9e2931",
                            CreatedOn = new DateTime(2024, 12, 10, 20, 39, 24, 270, DateTimeKind.Local).AddTicks(1068),
                            Email = "user3@example.com",
                            EmailConfirmed = false,
                            FirstName = "Carol",
                            IsDeleted = false,
                            LastName = "Taylor",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "../../images/no-profile-image",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = "3099c591-09ea-4c4f-ad94-8e4c557c1755",
                            AccessFailedCount = 0,
                            City = "Lqski",
                            ConcurrencyStamp = "548ae479-2ccb-4ee6-b226-23ab7698626a",
                            CreatedOn = new DateTime(2024, 12, 10, 20, 39, 24, 270, DateTimeKind.Local).AddTicks(1088),
                            Email = "user4@example.com",
                            EmailConfirmed = false,
                            FirstName = "David",
                            IsDeleted = false,
                            LastName = "Brown",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "../../images/no-profile-image",
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = "d1e4340d-0a6c-497f-ae2c-574f03f7351a",
                            AccessFailedCount = 0,
                            City = "Mosomishte",
                            ConcurrencyStamp = "3283f2a4-a79d-42ed-84d5-e32598fecaab",
                            CreatedOn = new DateTime(2024, 12, 10, 20, 39, 24, 270, DateTimeKind.Local).AddTicks(1104),
                            Email = "user5@example.com",
                            EmailConfirmed = false,
                            FirstName = "Eve",
                            IsDeleted = false,
                            LastName = "Davis",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "../../images/no-profile-image",
                            TwoFactorEnabled = false,
                            UserName = "user5"
                        });
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2326550-d8b7-48cd-afab-370f702febb5"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Springfield",
                            State = "Illinois",
                            ZipCode = "62704"
                        },
                        new
                        {
                            Id = new Guid("ebf4be4c-b944-4a60-8820-ce9add91c913"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Shelbyville",
                            State = "Illinois",
                            ZipCode = "62705"
                        },
                        new
                        {
                            Id = new Guid("0bb97157-9f48-4019-9d57-4f8f08f56ea4"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Ogdenville",
                            State = "Indiana",
                            ZipCode = "46123"
                        },
                        new
                        {
                            Id = new Guid("cd658fe2-309d-4de5-8eae-5af9bd2dd637"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "North Haverbrook",
                            State = "Indiana",
                            ZipCode = "46124"
                        },
                        new
                        {
                            Id = new Guid("6ee1013b-9ef3-4abd-9f91-ee39a1bdc3bf"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Capitol City",
                            State = "Illinois",
                            ZipCode = "62706"
                        });
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.CityStreet", b =>
                {
                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StreetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CityId", "StreetId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("StreetId");

                    b.ToTable("CitiesStreets");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FounderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("FounderId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c67f1eb3-11fd-4e34-a543-3f0ead3713fa"),
                            Address = "123 Main St, Springfield",
                            CreatedOn = new DateTime(2024, 12, 10, 20, 39, 24, 270, DateTimeKind.Local).AddTicks(1463),
                            FounderId = "4b5ab8a3-7604-447a-a603-f8e97e45fb61",
                            ImageUrl = "../../images/no-organization-image",
                            IsDeleted = false,
                            Name = "City Transport Co.",
                            Phone = "+1 555-1234"
                        },
                        new
                        {
                            Id = new Guid("c29a68cd-bf19-4f47-b0be-e4c19c7d548e"),
                            Address = "456 Elm St, Shelbyville",
                            CreatedOn = new DateTime(2024, 12, 10, 20, 39, 24, 270, DateTimeKind.Local).AddTicks(1487),
                            FounderId = "a982c9b9-c1bc-4a5b-a89a-4c53a701c526",
                            ImageUrl = "../../images/no-organization-image",
                            IsDeleted = false,
                            Name = "Express Logistics",
                            Phone = "+1 555-5678"
                        },
                        new
                        {
                            Id = new Guid("692b4dc6-9c52-4a86-8dd0-70c70d2618b7"),
                            Address = "789 Oak St, Ogdenville",
                            CreatedOn = new DateTime(2024, 12, 10, 20, 39, 24, 270, DateTimeKind.Local).AddTicks(1495),
                            FounderId = "c40f52d6-d2cc-4379-8acf-782558dba84c",
                            ImageUrl = "../../images/no-organization-image",
                            IsDeleted = false,
                            Name = "Safe Travels",
                            Phone = "+1 555-9012"
                        },
                        new
                        {
                            Id = new Guid("f9eef093-95c1-40b1-80c8-60c73e8045e3"),
                            Address = "321 Pine St, North Haverbrook",
                            CreatedOn = new DateTime(2024, 12, 10, 20, 39, 24, 270, DateTimeKind.Local).AddTicks(1506),
                            FounderId = "00591d7b-5bf5-475b-ac85-4a2467481881",
                            ImageUrl = "../../images/no-organization-image",
                            IsDeleted = false,
                            Name = "Urban Express",
                            Phone = "+1 555-3456"
                        },
                        new
                        {
                            Id = new Guid("c4fbbac9-ca54-4d2c-8a23-a1a072a77e46"),
                            Address = "654 Maple St, Capitol City",
                            CreatedOn = new DateTime(2024, 12, 10, 20, 39, 24, 270, DateTimeKind.Local).AddTicks(1513),
                            FounderId = "6b040313-77f4-49b0-b3d3-b25de95eb408",
                            ImageUrl = "../../images/no-organization-image",
                            IsDeleted = false,
                            Name = "Comfy Rides",
                            Phone = "+1 555-7890"
                        });
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CoursesCompleted")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Expenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Revenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TicketsSold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<Guid>("FromCityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FromStreetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToCityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToStreetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FromCityId");

                    b.HasIndex("FromStreetId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ToCityId");

                    b.HasIndex("ToStreetId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Arrival")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Departure")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RouteId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.Street", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Streets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ba431ef-d79a-4ad6-bcc6-9c9f382faec7"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Qntra"
                        },
                        new
                        {
                            Id = new Guid("48546194-3244-4c88-b55b-b3f1a10cfae4"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Tsaritsa Joanna"
                        },
                        new
                        {
                            Id = new Guid("c42a1b2e-afbe-4f81-8d68-aaac514f87af"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Dimitar Talev"
                        },
                        new
                        {
                            Id = new Guid("3b46a044-4bb2-4ad1-86f0-b198719e9137"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Polkovnik Drangov"
                        },
                        new
                        {
                            Id = new Guid("a64d591d-d8cf-488d-ad9a-dfb3a6962450"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Marica"
                        });
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RouteId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.UserTicket", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableTickets")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerId", "TicketId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("TicketId");

                    b.ToTable("UsersTickets");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("FuelConsumption")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("VehicleStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.CityStreet", b =>
                {
                    b.HasOne("GoceTransportApp.Data.Models.City", "City")
                        .WithMany("CityStreets")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoceTransportApp.Data.Models.Street", "Street")
                        .WithMany("StreetsCities")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.Driver", b =>
                {
                    b.HasOne("GoceTransportApp.Data.Models.Organization", "Organization")
                        .WithMany("OrganizationDrivers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.Message", b =>
                {
                    b.HasOne("GoceTransportApp.Data.Models.Organization", "Organization")
                        .WithMany("OrganizationMessages")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoceTransportApp.Data.Models.ApplicationUser", "Sender")
                        .WithMany("UserMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.Organization", b =>
                {
                    b.HasOne("GoceTransportApp.Data.Models.ApplicationUser", "Founder")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("FounderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Founder");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.Report", b =>
                {
                    b.HasOne("GoceTransportApp.Data.Models.Organization", "Organization")
                        .WithMany("OrganizationReports")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.Route", b =>
                {
                    b.HasOne("GoceTransportApp.Data.Models.City", "FromCity")
                        .WithMany("FromCityRoutes")
                        .HasForeignKey("FromCityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoceTransportApp.Data.Models.Street", "FromStreet")
                        .WithMany("FromStreetRoutes")
                        .HasForeignKey("FromStreetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoceTransportApp.Data.Models.Organization", "Organization")
                        .WithMany("OrganizationRoutes")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoceTransportApp.Data.Models.City", "ToCity")
                        .WithMany("ToCityRoutes")
                        .HasForeignKey("ToCityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoceTransportApp.Data.Models.Street", "ToStreet")
                        .WithMany("ToStreetRoutes")
                        .HasForeignKey("ToStreetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromCity");

                    b.Navigation("FromStreet");

                    b.Navigation("Organization");

                    b.Navigation("ToCity");

                    b.Navigation("ToStreet");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.Schedule", b =>
                {
                    b.HasOne("GoceTransportApp.Data.Models.Organization", "Organization")
                        .WithMany("OrganizationSchedules")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoceTransportApp.Data.Models.Route", "Route")
                        .WithMany("RouteSchedules")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoceTransportApp.Data.Models.Vehicle", "Vehicle")
                        .WithMany("Schedules")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Route");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.Ticket", b =>
                {
                    b.HasOne("GoceTransportApp.Data.Models.Organization", "Organization")
                        .WithMany("OrganizationTickets")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoceTransportApp.Data.Models.Route", "Route")
                        .WithMany("RouteTickets")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoceTransportApp.Data.Models.Schedule", "TimeTable")
                        .WithMany("ScheduleTickets")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Route");

                    b.Navigation("TimeTable");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.UserTicket", b =>
                {
                    b.HasOne("GoceTransportApp.Data.Models.ApplicationUser", "Customer")
                        .WithMany("UsersTickets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoceTransportApp.Data.Models.Ticket", "Ticket")
                        .WithMany("TicketsUsers")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.Vehicle", b =>
                {
                    b.HasOne("GoceTransportApp.Data.Models.Organization", "Organization")
                        .WithMany("OrganizationVehicles")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("GoceTransportApp.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GoceTransportApp.Data.Models.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GoceTransportApp.Data.Models.ApplicationUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("GoceTransportApp.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoceTransportApp.Data.Models.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GoceTransportApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Roles");

                    b.Navigation("UserMessages");

                    b.Navigation("UserOrganizations");

                    b.Navigation("UsersTickets");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.City", b =>
                {
                    b.Navigation("CityStreets");

                    b.Navigation("FromCityRoutes");

                    b.Navigation("ToCityRoutes");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.Organization", b =>
                {
                    b.Navigation("OrganizationDrivers");

                    b.Navigation("OrganizationMessages");

                    b.Navigation("OrganizationReports");

                    b.Navigation("OrganizationRoutes");

                    b.Navigation("OrganizationSchedules");

                    b.Navigation("OrganizationTickets");

                    b.Navigation("OrganizationVehicles");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.Route", b =>
                {
                    b.Navigation("RouteSchedules");

                    b.Navigation("RouteTickets");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.Schedule", b =>
                {
                    b.Navigation("ScheduleTickets");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.Street", b =>
                {
                    b.Navigation("FromStreetRoutes");

                    b.Navigation("StreetsCities");

                    b.Navigation("ToStreetRoutes");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.Ticket", b =>
                {
                    b.Navigation("TicketsUsers");
                });

            modelBuilder.Entity("GoceTransportApp.Data.Models.Vehicle", b =>
                {
                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
