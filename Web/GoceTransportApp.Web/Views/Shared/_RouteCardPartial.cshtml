@using System.Security.Claims
@using GoceTransportApp.Services.Data.Users
@using static GoceTransportApp.Common.GlobalConstants
@model GoceTransportApp.Web.ViewModels.Routes.RouteDataViewModel
@inject IUserService userService
@{
    var organizationId = Model.OrganizationId;  
    var userId = User.FindFirstValue(ClaimTypes.NameIdentifier); 
    var isFounder = await userService.HasUserCreatedOrganizationAsync(userId, organizationId);
    var isAdmin = User.IsInRole(AdministratorRoleName); 
}

<div class="col-md-4 mb-3">
    <div class="card shadow-sm h-100">
        <div class="card-body">
            <h5 class="card-title">Route: @Model.DepartingCity → @Model.ArrivingCity</h5>
            <p class="card-text">
                <strong>Departing Street:</strong> @Model.DepartingStreet<br />
                <strong>Arriving Street:</strong> @Model.ArrivingStreet
            </p>

            <div class="d-flex justify-content-between">
                @if (isFounder || isAdmin)
                {
                    <a asp-action="Edit" asp-controller="Route" asp-route-id="@Model.Id" asp-route-organizationId="@Model.OrganizationId" class="btn btn-warning btn-sm">
                        <i class="fas fa-edit"></i> Edit
                    </a>
                    <a asp-action="Delete" asp-controller="Route" asp-route-id="@Model.Id" asp-route-organizationId="@Model.OrganizationId" class="btn btn-danger btn-sm">
                        <i class="fas fa-trash-alt"></i> Delete
                    </a>
                }
                <a asp-action="Details" asp-controller="Route" asp-route-id="@Model.Id" asp-route-organizationId="@Model.OrganizationId" class="btn btn-info btn-sm">
                    <i class="fas fa-info-circle"></i> Details
                </a>
            </div>
        </div>
    </div>
</div>

